/*
 * Copyright 2019 University of Washington, Max Planck Institute for
 * Software Systems, and The University of Texas at Austin
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include <errno.h>
#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#define __USE_GNU
#include <assert.h>
#include <dlfcn.h>
#include <execinfo.h>
#include <fcntl.h>
#include <linux/userfaultfd.h>
#include <poll.h>
#include <pthread.h>
#include <skiplist.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/select.h>
#include <sys/stat.h>
#include <sys/syscall.h>
#include <sys/types.h>
#include <tas_sockets.h>
#include <unistd.h>
#include <utils.h>

//#define OPT_THRESHOLD 0xfffffffffffffffff
#define OPT_THRESHOLD 65535

#define PAGE_SIZE sysconf(_SC_PAGE_SIZE)
#define PAGE_MASK ~(PAGE_SIZE - 1)  // 0xfffffffff000

#define MAX_UFFD_MSGS 1

#define UFFD_PROTO

#define LOGON 0
#if LOGON
#define LOG(...) fprintf(stderr, __VA_ARGS__)
#else
#define LOG(...) \
  while (0) {    \
  }
#endif

#define LOG_STATS(...) fprintf(stderr, __VA_ARGS__)

#define MIN(x, y) (x < y ? x : y)

long uffd = -1;

pthread_t fault_thread, stats_thread;

static inline void ensure_init(void);

struct addr_encoding {
  uint64_t addr;
  uint32_t len;
  uint64_t code;
  uint8_t bytes[64];
};

struct addr_track {
  uint64_t last_addr;
  uint64_t original;
  uint16_t size;
};

struct addr_track roll_addr[2048];

uint64_t num_fast_writes, num_slow_writes, num_fast_copy, num_slow_copy,
    num_faults;

/* Function pointers to the libc functions */
static int (*libc_socket)(int domain, int type, int protocol) = NULL;
static int (*libc_close)(int sockfd) = NULL;
static int (*libc_shutdown)(int sockfd, int how) = NULL;
static int (*libc_bind)(int sockfd, const struct sockaddr *addr,
                        socklen_t addrlen) = NULL;
static int (*libc_connect)(int sockfd, const struct sockaddr *addr,
                           socklen_t addrlen) = NULL;
static int (*libc_listen)(int sockfd, int backlog) = NULL;
static int (*libc_accept4)(int sockfd, struct sockaddr *addr,
                           socklen_t *addrlen, int flags) = NULL;
static int (*libc_accept)(int sockfd, struct sockaddr *addr,
                          socklen_t *addrlen) = NULL;
static int (*libc_fcntl)(int sockfd, int cmd, ...) = NULL;
static int (*libc_getsockopt)(int sockfd, int level, int optname, void *optval,
                              socklen_t *optlen) = NULL;
static int (*libc_setsockopt)(int sockfd, int level, int optname,
                              const void *optval, socklen_t optlen) = NULL;
static int (*libc_getsockname)(int sockfd, struct sockaddr *addr,
                               socklen_t *addrlen) = NULL;
static int (*libc_getpeername)(int sockfd, struct sockaddr *addr,
                               socklen_t *addrlen) = NULL;
static ssize_t (*libc_read)(int fd, void *buf, size_t count) = NULL;
static ssize_t (*libc_recv)(int sockfd, void *buf, size_t len,
                            int flags) = NULL;
static ssize_t (*libc_recvfrom)(int sockfd, void *buf, size_t len, int flags,
                                struct sockaddr *src_addr,
                                socklen_t *addrlen) = NULL;
static ssize_t (*libc_recvmsg)(int sockfd, struct msghdr *msg,
                               int flags) = NULL;
static ssize_t (*libc_readv)(int sockfd, const struct iovec *iov,
                             int iovcnt) = NULL;
static ssize_t (*libc_write)(int fd, const void *buf, size_t count) = NULL;
static ssize_t (*libc_pwrite)(int fd, const void *buf, size_t count,
                              off_t offset) = NULL;
static ssize_t (*libc_send)(int sockfd, const void *buf, size_t len,
                            int flags) = NULL;
static ssize_t (*libc_sendto)(int sockfd, const void *buf, size_t len,
                              int flags, const struct sockaddr *dest_addr,
                              socklen_t addrlen) = NULL;
static ssize_t (*libc_sendmsg)(int sockfd, const struct msghdr *msg,
                               int flags) = NULL;
static ssize_t (*libc_writev)(int sockfd, const struct iovec *iov,
                              int iovcnt) = NULL;
static int (*libc_select)(int nfds, fd_set *readfds, fd_set *writefds,
                          fd_set *exceptfds, struct timeval *timeout) = NULL;
static int (*libc_pselect)(int nfds, fd_set *readfds, fd_set *writefds,
                           fd_set *exceptfds, const struct timespec *timeout,
                           const sigset_t *sigmask) = NULL;

static void *(*libc_memcpy)(void *dest, const void *src, size_t n);
static void *(*libc_memmove)(void *dest, const void *src, size_t n);
static void (*libc_free)(void *ptr);
static void *(*libc_realloc)(void *ptr, size_t new_size);
static void *(*libc_memset)(void *ptr, int value, size_t num);

skiplist addr_list;

void print_trace(void) {
  char **strings;
  size_t i, size;
  enum Constexpr { MAX_SIZE = 1024 };
  void *array[MAX_SIZE];
  size = backtrace(array, MAX_SIZE);
  strings = backtrace_symbols(array, size);
  for (i = 0; i < 5; i++) LOG("%s\n", strings[i]);
  free(strings);
}

// ssize_t read(int sockfd, void *buf, size_t count) {
//   ssize_t ret = 0;
//   static void *prev_addr, *prev_orig;  //, *max_addr;
//   static size_t prev_len;
//   uint64_t original;
//   ensure_init();

//   const int can_call_recv = (count > OPT_THRESHOLD);

//   if (can_call_recv) {
//     ret = libc_recv(sockfd, buf, count, MSG_WAITALL);
//   } else {
//     ret = libc_read(sockfd, buf, count);
//   }

//   const int read_error = (ret == -1);
//   if (read_error) {
//     perror("linux read");
//     return ret;
//   }

//   // do {
//   // ret = libc_read(sockfd, buf, count);
//   // if (ret == -1 && errno != EAGAIN) {
//   // perror("linux read");
//   // return ret;
//   // }
//   // } while (errno == EAGAIN);

//   LOG("tas read %zu bytes, page mask %lx, socket %d\n", ret,
//       ((uint64_t)buf) & PAGE_MASK, sockfd);

//   const int can_optimize = (ret > OPT_THRESHOLD);
//   if (can_optimize) {
//     LOG("reading from network at %p, size %zu, key %lx, original %p\n", buf,
//         ret, ((uint64_t)buf) & PAGE_MASK, (uint64_t)buf);

//     skiplist_insert(&addr_list, ((uint64_t)buf) & PAGE_MASK, (uint64_t)buf,
//                     count, 0);
//   }

//   return ret;

// #if 0
//     // TODO: What is roll_addr?
//     // LOG("returned addr %p, highest so far %p\n", original, max_addr);
//     LOG("old roll_addr %p, prev_addr %p, prev_len %zu\n",
//         roll_addr[sockfd].last_addr, prev_addr, prev_len);
//     if ((((uint64_t)prev_addr + prev_len) & PAGE_MASK) ==
//             (((uint64_t)buf) & PAGE_MASK) &&
//         prev_len) {
//       // roll_addr[sockfd].last_addr = (uint64_t) prev_addr + prev_len;
//       roll_addr[sockfd].last_addr = (uint64_t)buf + ret;
//       roll_addr[sockfd].size = prev_len + ret;
//       roll_addr[sockfd].original = prev_orig;
//       LOG("small addr found\n");
//     } else {
//       if (roll_addr[sockfd].last_addr == (uint64_t)buf) {
//         roll_addr[sockfd].last_addr = (uint64_t)buf + ret;
//         roll_addr[sockfd].size += ret;
//         LOG("rolling, old original %p new original %p\n",
//             roll_addr[sockfd].original, buf);
//       } else {
//         roll_addr[sockfd].last_addr = (uint64_t)buf + ret;
//         roll_addr[sockfd].size = ret;
//         roll_addr[sockfd].original = (uint64_t)buf;
//         LOG("not rolling, size is %zu, should be %zu\n",
//         roll_addr[sockfd].size,
//             ret);
//       }
//       LOG("small addr not found: prev %p, current %p\n",
//           (uint64_t)prev_addr + prev_len, (uint64_t)buf);
//     }

//     uint64_t old_addr =
//         (roll_addr[sockfd].last_addr - roll_addr[sockfd].size) & PAGE_MASK;
//     LOG("new roll_addr %p, size %zu, original %p inserting at %p\n",
//         roll_addr[sockfd].last_addr, roll_addr[sockfd].size, buf, old_addr);
//     skiplist_insert(&addr_list, old_addr, roll_addr[sockfd].original,
//                     roll_addr[sockfd].size, 0);
//   }

//   if (((uint64_t)buf - ret) == prev_addr) {
//     prev_len += ret;
//   } else {
//     prev_addr = buf;
//     prev_len = ret;
//     prev_orig = buf;
//   }

//   return ret;
// #endif
// }

ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags) {
  ensure_init();

  ssize_t ret = libc_recvmsg(sockfd, msg, flags);

  int i;
  for (i = 0; i < msg->msg_iovlen; i++) {
    uint64_t target_addr = (uint64_t)msg->msg_iov[i].iov_base;
    uint64_t target_len = msg->msg_iov[i].iov_len;
    uint64_t target_aligned_addr = target_addr & PAGE_MASK;

    uint64_t core_buffer_addr = (target_addr == target_aligned_addr)
                                    ? target_aligned_addr
                                    : target_aligned_addr + PAGE_SIZE;
    uint64_t left_fringe_len = core_buffer_addr - target_addr;
    uint64_t core_buffer_len = target_len - left_fringe_len;

    if (target_len > OPT_THRESHOLD) {
      snode *entry = skiplist_search(&addr_list, target_aligned_addr);
      if (entry == NULL) {
        skiplist_insert(&addr_list, target_aligned_addr, target_addr,
                        core_buffer_addr, core_buffer_len, left_fringe_len);

        struct uffdio_register uffdio_register;
        uffdio_register.range.start = core_buffer_addr;
        uffdio_register.range.len = core_buffer_len;
        uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;
        uffdio_register.ioctls = 0;

        LOG("[%s] uffd registering addr %p-%p, len %zu\n", __func__,
            core_buffer_addr, core_buffer_addr + core_buffer_len,
            core_buffer_len);
        if (ioctl(uffd, UFFDIO_REGISTER, &uffdio_register) == -1) {
          perror("ioctl uffdio_register");
          abort();
        }

        LOG("[%s] insert %p(%p) len: %lu into skiplist\n", __func__,
            target_aligned_addr, target_addr, target_len);
      } else {
        // update the entry
      }
    }
  }

  return ret;
}

// ssize_t write(int sockfd, const void *buf, size_t count) {
//   ensure_init();

//   ssize_t ret = 0;

//   const int cannot_optimize = (count <= OPT_THRESHOLD);

//   if (cannot_optimize) {
//     return libc_write(sockfd, buf, count);
//   }

//   snode *entry = skiplist_search(&addr_list, ((uint64_t)buf) & PAGE_MASK);
//   LOG("writing to linux from %p, bounded %p, size %zu, entry %p\n", buf,
//       ((uint64_t)buf) & PAGE_MASK, count, entry);

//   if (!entry) {
//     LOG("slow write !!! entry %p not found\n", buf);

//     num_slow_writes++;
//     return libc_write(sockfd, buf, count);
//   }

//   // clean up old skiplist entry

//   uint64_t src_bounded = ((uint64_t)buf) & PAGE_MASK;
//   uint32_t register_len = (count & PAGE_MASK) - PAGE_SIZE;

//   struct uffdio_range uffdio_unregister;
//   uffdio_unregister.start = src_bounded + PAGE_SIZE;
//   uffdio_unregister.len = register_len;

//   LOG("uffd unregistering addr %p-%p, len %zu\n", src_bounded + PAGE_SIZE,
//       src_bounded + PAGE_SIZE + register_len, register_len);

//   const int unregister_failed =
//       (ioctl(uffd, UFFDIO_UNREGISTER, &uffdio_unregister) == -1);

//   if (unregister_failed) {
//     perror("ioctl uffdio_unregister");
//     abort();
//   }

//   num_fast_writes++;

//   skiplist_delete(&addr_list, ((uint64_t)buf) & PAGE_MASK);
//   LOG("write from %p len %zu out of %zu\n", entry->orig, entry->len, count);

//   ret = libc_write(sockfd, (const void *)entry->orig, count);

//   LOG("actually wrote %zu\n", ret);

//   return ret;
// }

ssize_t pwrite(int sockfd, const void *buf, size_t count, off_t offset) {
  ensure_init();

  ssize_t ret = 0;

  const int cannot_optimize = (count <= OPT_THRESHOLD);

  if (cannot_optimize) {
    return libc_pwrite(sockfd, buf, count, offset);
  }

  uint64_t buf_aligned_addr = (uint64_t)buf & PAGE_MASK;

  snode *entry = skiplist_search(&addr_list, buf_aligned_addr);
  LOG("writing to linux from %p, bounded %p, size %zu, entry %p\n", buf,
      buf_aligned_addr, count, entry);

  if (!entry) {
    LOG("[%s] slow write !!! entry %p not found\n", __func__, buf);

    num_slow_writes++;
    return libc_pwrite(sockfd, buf, count, offset);
  }

  // clean up old skiplist entry

  // uint64_t src_bounded = ((uint64_t)buf) & PAGE_MASK;
  // uint32_t register_len = (count & PAGE_MASK) - PAGE_SIZE;

  // struct uffdio_range uffdio_unregister;
  // uffdio_unregister.start = src_bounded + PAGE_SIZE;
  // uffdio_unregister.len = register_len;

  // LOG("uffd unregistering addr %p-%p, len %zu\n", src_bounded + PAGE_SIZE,
  //     src_bounded + PAGE_SIZE + register_len, register_len);

  // const int unregister_failed =
  //     (ioctl(uffd, UFFDIO_UNREGISTER, &uffdio_unregister) == -1);

  // if (unregister_failed) {
  //   perror("ioctl uffdio_unregister");
  //   abort();
  // }

  num_fast_writes++;

  // skiplist_delete(&addr_list, ((uint64_t)buf) & PAGE_MASK);
  LOG("write from %p len %zu out of %zu\n", entry->orig, entry->len, count);

  ret = libc_pwrite(sockfd, (const void *)entry->orig, count, offset);

  LOG("actually wrote %zu\n", ret);

  return ret;
}

void *memcpy(void *dest, const void *src, size_t n) {
  ensure_init();

  static uint64_t prev_start, prev_end;
  // TODO: parse big copy for multiple small copies

  int cannot_optimize = (n <= OPT_THRESHOLD);

  if (cannot_optimize) {
    return libc_memcpy(dest, src, n);
  }

  uint64_t src_aligned_addr = (uint64_t)src & PAGE_MASK;

  LOG("[%s] copying %p-%p to %p-%p, size %zu\n", __func__, src, src + n, dest,
      dest + n, n);
  // skiplist_dump(&addr_list);

  snode *src_entry = skiplist_search(&addr_list, src_aligned_addr);
  cannot_optimize = (src_entry == NULL);
  if (cannot_optimize) {
    LOG("[%s] %p did not originated from I/O, Copy!\n", __func__, src);
    num_slow_copy++;
    return libc_memcpy(dest, src, n);
  }

  LOG("[%s] originated from I/O: lookup: %p, orig: %p, len: %lu, off: %lu\n",
      __func__, src_entry->lookup, src_entry->orig, src_entry->len,
      src_entry->offset);

  snode dest_entry;
  dest_entry.orig = src_entry->orig;
  dest_entry.len = ((n - src_entry->offset) / PAGE_SIZE) * PAGE_SIZE;
  dest_entry.offset = src_entry->offset;
  dest_entry.lookup = (uint64_t)dest & PAGE_MASK;

  const is_dest_aligned = (dest == dest_entry.lookup);
  dest_entry.core =
      is_dest_aligned ? dest_entry.lookup : dest_entry.lookup + PAGE_SIZE;

  // TODO: If the destination location is within a buffer already tracked in the
  // skiplist, the skiplist entry is updated with the new buffer information.

  const int should_change_core = (dest + src_entry->offset >= dest_entry.core);
  if (should_change_core) {
    dest_entry.core += PAGE_SIZE;
  }

  LOG("[%s] Left fringe copy to %p-%p\n", __func__,
      dest_entry.core - src_entry->offset, dest_entry.core);
  libc_memcpy(dest_entry.core - src_entry->offset, src_entry->orig,
              src_entry->offset);

  mmap(dest_entry.core, dest_entry.len, PROT_READ | PROT_WRITE,
       MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, -1, 0);

  struct uffdio_register uffdio_register;
  uffdio_register.range.start = dest_entry.core;
  uffdio_register.range.len = dest_entry.len;
  uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;
  uffdio_register.ioctls = 0;

  LOG("[%s] uffd registering addr %p-%p, len %zu\n", __func__, dest_entry.core,
      dest_entry.core + dest_entry.len, dest_entry.len);
  if (ioctl(uffd, UFFDIO_REGISTER, &uffdio_register) == -1) {
    perror("ioctl uffdio_register");
    abort();
  }

  libc_memcpy(dest_entry.core + dest_entry.len,
              src_entry->orig + src_entry->offset + dest_entry.len,
              (n - src_entry->offset) % PAGE_SIZE);

  LOG("inserting original %p at location %p\n", dest_entry.orig,
      dest_entry.lookup);

  skiplist_insert_entry(&addr_list, &dest_entry);

  // snode *original_buffer_entry =
  //     skiplist_search_touched_buffer(&addr_list, original);
  // if (!original_buffer_entry) {
  //   fprintf(stderr, "[%s:%d] invalid codepath\n", __func__, __LINE__);
  //   abort();
  // }

  // uint64_t new_len =
  //     original_buffer_entry->len > n ? original_buffer_entry->len : n;
  // LOG("update original_buffer_entry %p: len %lu -> %lu\n",
  //     original_buffer_entry->lookup, original_buffer_entry->len, new_len);
  // original_buffer_entry->len = new_len;

  num_fast_copy++;

  return dest;
}

void free(void *ptr) {
  uint64_t ptr_bounded = (uint64_t)ptr & PAGE_MASK;
  snode *entry = skiplist_search(&addr_list, ptr_bounded);

  if (entry) {
    if (entry->orig == ptr) {
      // mark for later free
      entry->free = 1;
      return;
    } else {
      skiplist_delete(&addr_list, ptr_bounded);
    }
  }
  return libc_free(ptr);
}

// TODO: old version of realloc
// void *realloc(void *ptr, size_t new_size) {
//   ensure_init();

//   // it should just be malloc, and then unmapping then registering the
//   malloced
//   // pointer with userfaultfd

//   int cannot_optimize = (new_size <= OPT_THRESHOLD || ptr == NULL);

//   if (cannot_optimize) {
//     return libc_realloc(ptr, new_size);
//   }

//   snode *entry = skiplist_search(&addr_list, ((uint64_t)ptr) & PAGE_MASK);
//   cannot_optimize = (entry == NULL);

//   if (cannot_optimize) {
//     return libc_realloc(ptr, new_size);
//   }

//   LOG("[%s] ptr: %p, size: %zu\n", __func__, ptr, new_size);

//   void *new_ptr;
//   int ret = posix_memalign(&new_ptr, PAGE_SIZE, new_size);
//   if (ret == -1) {
//     perror("failed to posix_memalign");
//     new_ptr = malloc(new_size);
//     if (!new_ptr) {
//       perror("failed to malloc");
//       abort();
//     }
//   }

//   uint64_t original = entry->orig;

//   uint64_t new_ptr_bounded = ((uint64_t)new_ptr) & PAGE_MASK;
//   uint64_t ptr_bounded = ((uint64_t)ptr) & PAGE_MASK;
//   uint64_t offset = ((uint64_t)new_ptr) - new_ptr_bounded;

//   uint64_t register_len = (new_size - PAGE_SIZE) & PAGE_MASK;

//   LOG("mmaping for uffd at %p, length %zu\n", new_ptr_bounded + PAGE_SIZE,
//       register_len);
//   uint64_t mapped_addr = (uint64_t)mmap(
//       ((void *)(new_ptr_bounded + PAGE_SIZE)), register_len,
//       PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS, -1,
//       0);
//   if (mapped_addr != (new_ptr_bounded + PAGE_SIZE)) {
//     fprintf(stderr, "bad mmap return %p... parameters %p, %zu\n", ret,
//             new_ptr_bounded + PAGE_SIZE, register_len);
//     perror("memcpy mmap");
//     abort();
//   }

//   struct uffdio_register uffdio_register;
//   uffdio_register.range.start = new_ptr_bounded + PAGE_SIZE;
//   uffdio_register.range.len = register_len;
//   uffdio_register.mode = UFFDIO_REGISTER_MODE_MISSING;
//   uffdio_register.ioctls = 0;

//   LOG("uffd registering addr %p-%p, len %zu\n", new_ptr_bounded + PAGE_SIZE,
//       new_ptr_bounded + PAGE_SIZE + register_len, register_len);
//   if (ioctl(uffd, UFFDIO_REGISTER, &uffdio_register) == -1) {
//     perror("ioctl uffdio_register");
//     abort();
//   }

//   LOG("successfully mapped and registered %p\n", new_ptr_bounded +
//   PAGE_SIZE); LOG("inserting original %p at location %p\n", original,
//   new_ptr_bounded);

//   skiplist_insert(&addr_list, new_ptr_bounded, original, new_size, offset);

//   print_trace();

//   return new_ptr;
// }

#if USED
void *memmove(void *dest, const void *src, size_t n) {
  ensure_init();
  if (n > OPT_THRESHOLD) {
    LOG("[%s] moving %p to %p, size %zu\n", __func__, src, dest, n);
    // return dest;
  } else if (n > 1024)
    ;
  // LOG("sizeable, but not large enough move from %p to %p of size %zu\n",
  // dest,
  //     src, n);
  return libc_memmove(dest, src, n);
}
#endif

/******************************************************************************/
/* Helper functions */

static void *bind_symbol(const char *sym) {
  void *ptr;
  if ((ptr = dlsym(RTLD_NEXT, sym)) == NULL) {
    fprintf(stderr, "flextcp socket interpose: dlsym failed (%s)\n", sym);
    abort();
  }
  return ptr;
}

void *print_stats() {
  while (1) {
    LOG_STATS(
        "fast copies: %lu\tslow copies: %lu\tfast writes: %lu\tslow "
        "writes: %lu\tpage faults: %lu\n",
        num_fast_copy, num_slow_copy, num_fast_writes, num_slow_writes,
        num_faults);
    num_fast_writes = num_slow_writes = num_fast_copy = num_slow_copy =
        num_faults = 0;
    sleep(1);
  }
}

void *handle_fault() {
  static struct uffd_msg msg[MAX_UFFD_MSGS];
  ssize_t nread;
  uint64_t fault_addr;
  uint64_t fault_flags;
  uint64_t page_boundary;
  struct uffdio_range range;
  int ret;
  int nmsgs;
  int i;

  // cpu_set_t cpuset;
  // pthread_t thread;
  // thread = pthread_self();

  // CPU_ZERO(&cpuset);

  // CPU_SET(FAULT_THREAD_CPU, &cpuset);

  // int s = pthread_setaffinity_np(thread, sizeof(cpu_set_t), &cpuset);

  // if (s != 0) {
  //  perror("pthread_setaffinity_np");
  //  assert(0);
  //}

  for (;;) {
    struct pollfd pollfd;
    int pollres;
    pollfd.fd = uffd;
    pollfd.events = POLLIN;

    pollres = poll(&pollfd, 1, -1);

    LOG("waking for page fault?\n");

    switch (pollres) {
      case -1:
        perror("poll");
        assert(0);
      case 0:
        fprintf(stderr, "poll read 0\n");
        continue;
      case 1:
        break;
      default:
        fprintf(stderr, "unexpected poll result\n");
        assert(0);
    }

    if (pollfd.revents & POLLERR) {
      fprintf(stderr, "pollerr\n");
      assert(0);
    }

    if (!pollfd.revents & POLLIN) {
      continue;
    }

    nread = libc_read(uffd, &msg[0], MAX_UFFD_MSGS * sizeof(struct uffd_msg));
    if (nread == 0) {
      fprintf(stderr, "EOF on userfaultfd\n");
      assert(0);
    }
    if (nread < 0) {
      if (errno == EAGAIN) {
        continue;
      }
      perror("read");
      assert(0);
    }

    if ((nread % sizeof(struct uffd_msg)) != 0) {
      fprintf(stderr, "invalid msg size: [%ld]\n", nread);
      assert(0);
    }

    nmsgs = nread / sizeof(struct uffd_msg);
    for (i = 0; i < nmsgs; i++) {
      if (msg[i].event & UFFD_EVENT_PAGEFAULT) {
        LOG("page fault event\n");
        fault_addr = (uint64_t)msg[i].arg.pagefault.address;
        fault_flags = msg[i].arg.pagefault.flags;

        page_boundary = fault_addr & ~(PAGE_SIZE - 1);

        LOG("[%s] handling fault at %p\n", __func__, fault_addr);

        snode *fault_buffer_entry =
            skiplist_search_buffer_fallin(&addr_list, page_boundary);
        if (fault_buffer_entry) {
          const int is_original_buffer =
              fault_buffer_entry->orig &
              PAGE_MASK == fault_buffer_entry->lookup;
          if (is_original_buffer) {
          } else {
            uint64_t core_buffer_end =
                fault_buffer_entry->core + fault_buffer_entry->len;

            LOG("[%s] page_boundary: %p, fault_buffer_entry->lookup: %p, "
                "fault_buffer_entry->orig: %p, fault_buffer_entry->core: %p, "
                "core end: %p, "
                "fault_buffer_entry->len: %lu\n",
                __func__, page_boundary, fault_buffer_entry->lookup,
                fault_buffer_entry->orig, fault_buffer_entry->core,
                core_buffer_end, fault_buffer_entry->len);

            size_t page_index =
                (page_boundary - fault_buffer_entry->core) / PAGE_SIZE;

            LOG("page index: %zu\n", page_index);

            uint64_t new_len =
                fault_buffer_entry->len - (page_index * PAGE_SIZE);

            LOG("new_len: %lu is a factor of page? %d\n", new_len,
                new_len % PAGE_SIZE == 0);

            page_boundary = mmap(
                (void *)page_boundary, new_len, PROT_READ | PROT_WRITE,
                MAP_PRIVATE | MAP_FIXED | MAP_POPULATE | MAP_ANONYMOUS, 0, 0);

            if ((void *)page_boundary == MAP_FAILED) {
              perror("failed to handle missing fault");
              abort();
            }

            libc_memcpy((void *)page_boundary,
                        (void *)fault_buffer_entry->orig +
                            fault_buffer_entry->offset + page_index * PAGE_SIZE,
                        new_len);
            LOG("[%s] copy touched page %p -> %p len: %lu\n", __func__,
                (void *)fault_buffer_entry->orig + fault_buffer_entry->offset +
                    page_index * PAGE_SIZE,
                page_boundary, new_len);

            struct uffdio_range uffdio_unregister;
            uffdio_unregister.start = page_boundary;
            uffdio_unregister.len = new_len;

            const int unregister_failed =
                (ioctl(uffd, UFFDIO_UNREGISTER, &uffdio_unregister) == -1);

            if (unregister_failed) {
              perror("ioctl uffdio_unregister");
              abort();
            }

            if (new_len > OPT_THRESHOLD) {
              LOG("[%s] Add the fault page to skiplist\n", __func__);

              skiplist_insert(&addr_list, page_boundary, page_boundary,
                              page_boundary, new_len, 0);
            }

            const char can_delete_fault_buffer_entry = (page_index == 0);
            if (can_delete_fault_buffer_entry) {
              LOG("[%s] delete the entry %p\n", __func__,
                  fault_buffer_entry->lookup);

              skiplist_delete(&addr_list, fault_buffer_entry->lookup);
            } else {
              LOG("[%s] update the entry %p: len %lu -> %lu\n", __func__,
                  fault_buffer_entry->lookup, fault_buffer_entry->len,
                  fault_buffer_entry->len - new_len);

              fault_buffer_entry->len -= new_len;
            }
          }
        } else {
          fprintf(stderr, "[%s:%d] invalid codepath\n", __func__, __LINE__);
          abort();
        }

        num_faults++;

        range.start = page_boundary;
        range.len = PAGE_SIZE;

        ret = ioctl(uffd, UFFDIO_WAKE, &range);

        if (ret < 0) {
          perror("uffdio wake");
          assert(0);
        }
      } else if (msg[i].event & UFFD_EVENT_UNMAP) {
        fprintf(stderr, "Received an unmap event\n");
        assert(0);
      } else if (msg[i].event & UFFD_EVENT_REMOVE) {
        fprintf(stderr, "received a remove event\n");
        assert(0);
      } else {
        fprintf(stderr, "received a non page fault event\n");
        assert(0);
      }
    }
  }
}

static void init(void) {
  fprintf(stdout, "zIO start\n");

  libc_socket = bind_symbol("socket");
  libc_close = bind_symbol("close");
  libc_shutdown = bind_symbol("shutdown");
  libc_bind = bind_symbol("bind");
  libc_connect = bind_symbol("connect");
  libc_listen = bind_symbol("listen");
  libc_accept4 = bind_symbol("accept4");
  libc_accept = bind_symbol("accept");
  libc_fcntl = bind_symbol("fcntl");
  libc_getsockopt = bind_symbol("getsockopt");
  libc_setsockopt = bind_symbol("setsockopt");
  libc_getsockname = bind_symbol("getsockname");
  libc_getpeername = bind_symbol("getpeername");
  libc_read = bind_symbol("read");
  libc_recv = bind_symbol("recv");
  libc_recvfrom = bind_symbol("recvfrom");
  libc_recvmsg = bind_symbol("recvmsg");
  libc_readv = bind_symbol("readv");
  libc_write = bind_symbol("write");
  libc_pwrite = bind_symbol("pwrite");
  libc_send = bind_symbol("send");
  libc_sendto = bind_symbol("sendto");
  libc_sendmsg = bind_symbol("sendmsg");
  libc_writev = bind_symbol("writev");
  libc_select = bind_symbol("select");
  libc_pselect = bind_symbol("pselect");

  libc_memmove = bind_symbol("memmove");
  libc_memcpy = bind_symbol("memcpy");
  libc_free = bind_symbol("free");
  libc_realloc = bind_symbol("realloc");
  libc_memset = bind_symbol("memset");

  // new tracking code
  skiplist_init(&addr_list);

#ifdef UFFD_PROTO
  uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);
  if (uffd == -1) {
    perror("uffd");
    abort();
  }

  num_fast_writes = num_slow_writes = num_fast_copy = num_slow_copy =
      num_faults = 0;

  struct uffdio_api uffdio_api;
  uffdio_api.api = UFFD_API;
  uffdio_api.features =
      0;  // UFFD_FEATURE_PAGEFAULT_FLAG_WP |  UFFD_FEATURE_MISSING_SHMEM |
          // UFFD_FEATURE_MISSING_HUGETLBFS;// | UFFD_FEATURE_EVENT_UNMAP |
          // UFFD_FEATURE_EVENT_REMOVE;
  uffdio_api.ioctls = 0;
  if (ioctl(uffd, UFFDIO_API, &uffdio_api) == -1) {
    perror("ioctl uffdio_api");
    abort();
  }

  if (pthread_create(&fault_thread, NULL, handle_fault, 0) != 0) {
    perror("fault thread create");
    abort();
  }

  printf("launching stats\n");
  if (pthread_create(&stats_thread, NULL, print_stats, 0) != 0) {
    perror("stats thread create");
    abort();
  }

  LOG("uffd initialized\n");
#endif

  // if (tas_init() != 0) {
  //  abort();
  //}
}

static inline void ensure_init(void) {
  static volatile uint32_t init_cnt = 0;
  static volatile uint8_t init_done = 0;
  static __thread uint8_t in_init = 0;

  if (init_done == 0) {
    /* during init the socket functions will be used to connect to the kernel
     * on a unix socket, so make sure that runs through. */
    if (in_init) {
      return;
    }

    if (__sync_fetch_and_add(&init_cnt, 1) == 0) {
      in_init = 1;
      init();
      in_init = 0;
      MEM_BARRIER();
      init_done = 1;
    } else {
      while (init_done == 0) {
        pthread_yield();
      }
      MEM_BARRIER();
    }
  }
}
